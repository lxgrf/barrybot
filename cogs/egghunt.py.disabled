import json
import logging
import asyncio
import pathlib
import discord
from discord import app_commands
from discord.ext import commands
import config

logger = logging.getLogger(__name__)

async def save_posts_to_file(posts):
    """Save posts to a JSON file in the data directory"""
    pathlib.Path("/data").mkdir(exist_ok=True)
    with open(config.POSTS_FILE, "w") as f:
        json.dump(posts, f, indent=2)

async def load_posts_from_file():
    """Load posts from the JSON file"""
    try:
        with open(config.POSTS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

class EggHunt(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="eggleaderboard", description="Show leaderboard of who has reacted with 🥚 to posts")
    @app_commands.guilds(discord.Object(id=866376531995918346))  # Silverymoon only
    async def eggleaderboard(self, interaction: discord.Interaction):
        """Show leaderboard of who has reacted with 🥚 to posts in eggposts (Silverymoon only)"""
        if not interaction.guild or interaction.guild.id != 866376531995918346:
            await interaction.response.send_message("This command only works in Silverymoon!", ephemeral=True)
            return
            
        await interaction.response.defer(ephemeral=True)
        await interaction.followup.send("Starting to check egg reactions...", ephemeral=True)
        
        egg_reactors = {}
        failed_posts = []
        
        try:
            posts = await load_posts_from_file()
            total_posts = len(posts)
            await interaction.followup.send(f"Found {total_posts} posts to check...", ephemeral=True)
            
            for i, post in enumerate(posts, 1):
                try:
                    parts = post["message_link"].split('/')
                    channel_id = int(parts[-2])
                    message_id = int(parts[-1])
                    
                    channel = self.bot.get_channel(channel_id)
                    if not channel:
                        logger.warning(f"Could not find channel {channel_id}")
                        continue
                        
                    message = await channel.fetch_message(message_id)
                    
                    if not message.guild or message.guild.id != 866376531995918346:
                        continue
                        
                    for reaction in message.reactions:
                        if str(reaction.emoji) == '🥚':
                            async for user in reaction.users():
                                if user.bot:
                                    continue
                                egg_reactors[user.id] = egg_reactors.get(user.id, 0) + 1
                    
                    if i % 10 == 0:
                        await asyncio.sleep(1)
                        await interaction.followup.send(f"Progress: {i}/{total_posts} posts checked...", ephemeral=True)
                                
                except Exception as e:
                    logger.error(f"Failed to check post {post['message_link']}: {str(e)}")
                    failed_posts.append(post['message_link'])
                    continue
            
            if not egg_reactors:
                await interaction.followup.send("No egg reactions found!", ephemeral=True)
                return
                
            sorted_reactors = sorted(egg_reactors.items(), key=lambda x: x[1], reverse=True)
            
            leaderboard = "# 🥚 Egg Hunt Leaderboard 🥚\n"
            for i, (user_id, count) in enumerate(sorted_reactors, 1):
                user = interaction.guild.get_member(user_id)
                if user:
                    leaderboard += f"{i}. {user.display_name}: {count} egg{'s' if count != 1 else ''}\n"
            
            if failed_posts:
                leaderboard += f"\nFailed to check {len(failed_posts)} posts due to errors."
                
            await interaction.followup.send(leaderboard)
            
        except Exception as e:
            logger.error(f"Error in eggleaderboard command: {str(e)}")
            await interaction.followup.send(f"Error: {str(e)}", ephemeral=True)

async def setup(bot):
    await bot.add_cog(EggHunt(bot)) 